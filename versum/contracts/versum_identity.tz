{ parameter
    (or (or (or (or (or (list %_batch_add_ban address)
                        (or (list %_batch_add_ban_soft address) (list %_batch_add_verified address)))
                    (or (or (list %_batch_rm_ban address) (list %_batch_rm_ban_soft address))
                        (or (list %_batch_rm_verified address)
                            (list %_confiscate_fa2 (pair (address %address) (list %fa2s (pair address nat)))))))
                (or (or (or (list %_confiscate_xtz address) (option %_delegate key_hash))
                        (or (list %_flag_wallets address)
                            (pair %_manual_kyc_add (address %address) (timestamp %valid_until))))
                    (or (or (address %_manual_kyc_remove) (address %_set_administrator))
                        (or (address %_set_materia_address)
                            (pair %_set_names_root (bytes %info) (pair (bytes %new_root) (nat %proof_depth)))))))
            (or (or (or (or (pair %_set_verification_root
                               (bytes %info)
                               (pair (bytes %new_root) (nat %proof_depth)))
                            (list %_unflag_wallets address))
                        (or (address %_update_kyc_proxy) (address %_update_price_proxy)))
                    (or (or (pair %_withdraw_baking_rewards (mutez %amount) (address %to))
                            (pair %_withdraw_confiscated_fa2
                               (nat %amount)
                               (pair (pair %fa2 address nat) (address %to))))
                        (or (pair %_withdraw_confiscated_xtz (mutez %amount) (address %to))
                            (pair %batch_fwd_fa2
                               (pair (address %buyer) (pair %fa2 address nat))
                               (pair (address %from_) (list %receivers (pair (address %address) (nat %amount))))))))
                (or (or (or (pair %batch_fwd_xtz
                               (address %buyer)
                               (list %receivers (pair (address %address) (mutez %amount))))
                            (address %claim_kyc_check))
                        (or (pair %claim_username
                               (nat %claim_strength)
                               (pair (string %name) (list %proofs bytes)))
                            (list %claim_verification bytes)))
                    (or (or (bytes %generic)
                            (pair %set_metadata (address %address) (map %metadata string bytes)))
                        (or (pair %withdraw_outstanding_fa2 address nat) (unit %withdraw_outstanding_tez))))))
        (or (unit %default)
            (or (pair %update_ep
                   (or %ep_name
                      (or (or (unit %_delegate) (unit %batch_fwd_fa2))
                          (or (unit %batch_fwd_xtz) (unit %claim_kyc_check)))
                      (or (or (unit %claim_username) (unit %claim_verification))
                          (or (unit %generic)
                              (or (unit %withdraw_outstanding_fa2) (unit %withdraw_outstanding_tez)))))
                   (lambda %new_ep
                      (pair (or (or (or (or (list %_batch_add_ban address)
                                            (or (list %_batch_add_ban_soft address) (list %_batch_add_verified address)))
                                        (or (or (list %_batch_rm_ban address) (list %_batch_rm_ban_soft address))
                                            (or (list %_batch_rm_verified address)
                                                (list %_confiscate_fa2 (pair (address %address) (list %fa2s (pair address nat)))))))
                                    (or (or (or (list %_confiscate_xtz address) (option %_delegate key_hash))
                                            (or (list %_flag_wallets address)
                                                (pair %_manual_kyc_add (address %address) (timestamp %valid_until))))
                                        (or (or (address %_manual_kyc_remove) (address %_set_administrator))
                                            (or (address %_set_materia_address)
                                                (pair %_set_names_root (bytes %info) (pair (bytes %new_root) (nat %proof_depth)))))))
                                (or (or (or (or (pair %_set_verification_root
                                                   (bytes %info)
                                                   (pair (bytes %new_root) (nat %proof_depth)))
                                                (list %_unflag_wallets address))
                                            (or (address %_update_kyc_proxy) (address %_update_price_proxy)))
                                        (or (or (pair %_withdraw_baking_rewards (mutez %amount) (address %to))
                                                (pair %_withdraw_confiscated_fa2
                                                   (nat %amount)
                                                   (pair (pair %fa2 address nat) (address %to))))
                                            (or (pair %_withdraw_confiscated_xtz (mutez %amount) (address %to))
                                                (pair %batch_fwd_fa2
                                                   (pair (address %buyer) (pair %fa2 address nat))
                                                   (pair (address %from_) (list %receivers (pair (address %address) (nat %amount))))))))
                                    (or (or (or (pair %batch_fwd_xtz
                                                   (address %buyer)
                                                   (list %receivers (pair (address %address) (mutez %amount))))
                                                (address %claim_kyc_check))
                                            (or (pair %claim_username
                                                   (nat %claim_strength)
                                                   (pair (string %name) (list %proofs bytes)))
                                                (list %claim_verification bytes)))
                                        (or (or (bytes %generic)
                                                (pair %set_metadata (address %address) (map %metadata string bytes)))
                                            (or (pair %withdraw_outstanding_fa2 address nat) (unit %withdraw_outstanding_tez))))))
                            (pair (pair (pair (pair (lambda %admin_check_lambda
                                                       (pair (pair (address %address) (option %permission string))
                                                             (pair (address %self_address) (address %self_admin)))
                                                       bool)
                                                    (address %administrator))
                                              (pair (mutez %collected_baking_awards)
                                                    (pair (big_map %confiscated_fa2 (pair address nat) nat) (mutez %confiscated_xtz))))
                                        (pair (pair (big_map %extra_db bytes bytes)
                                                    (pair (address %kyc_proxy) (nat %kyc_threshold_euro)))
                                              (pair (address %materia_address)
                                                    (pair (lambda %may_modify_lambda
                                                             (pair (address %caller) (pair (address %self_admin) (list %wallets address)))
                                                             bool)
                                                          (big_map %metadata string bytes)))))
                                  (pair (pair (pair (big_map %names string (pair (nat %claim_strength) (address %holder)))
                                                    (bytes %names_merkle_root))
                                              (pair (bytes %names_merkle_root_info)
                                                    (pair (nat %names_merkle_root_proof_depth)
                                                          (big_map %outstanding_fa2 (pair address (pair address nat)) nat))))
                                        (pair (pair (address %price_proxy)
                                                    (pair (bool %require_basic_kyc)
                                                          (big_map %users
                                                             address
                                                             (pair (pair (option %first_payment timestamp)
                                                                         (pair (set %flags string) (timestamp %kyc_valid_until)))
                                                                   (pair (pair (map %metadata string bytes) (option %name string))
                                                                         (pair (mutez %outstanding_tez) (nat %total_payments_euro_est)))))))
                                              (pair (bytes %verify_merkle_root)
                                                    (pair (bytes %verify_merkle_root_info) (nat %verify_merkle_root_proof_depth)))))))
                      (pair (list operation)
                            (pair (pair (pair (pair (lambda %admin_check_lambda
                                                       (pair (pair (address %address) (option %permission string))
                                                             (pair (address %self_address) (address %self_admin)))
                                                       bool)
                                                    (address %administrator))
                                              (pair (mutez %collected_baking_awards)
                                                    (pair (big_map %confiscated_fa2 (pair address nat) nat) (mutez %confiscated_xtz))))
                                        (pair (pair (big_map %extra_db bytes bytes)
                                                    (pair (address %kyc_proxy) (nat %kyc_threshold_euro)))
                                              (pair (address %materia_address)
                                                    (pair (lambda %may_modify_lambda
                                                             (pair (address %caller) (pair (address %self_admin) (list %wallets address)))
                                                             bool)
                                                          (big_map %metadata string bytes)))))
                                  (pair (pair (pair (big_map %names string (pair (nat %claim_strength) (address %holder)))
                                                    (bytes %names_merkle_root))
                                              (pair (bytes %names_merkle_root_info)
                                                    (pair (nat %names_merkle_root_proof_depth)
                                                          (big_map %outstanding_fa2 (pair address (pair address nat)) nat))))
                                        (pair (pair (address %price_proxy)
                                                    (pair (bool %require_basic_kyc)
                                                          (big_map %users
                                                             address
                                                             (pair (pair (option %first_payment timestamp)
                                                                         (pair (set %flags string) (timestamp %kyc_valid_until)))
                                                                   (pair (pair (map %metadata string bytes) (option %name string))
                                                                         (pair (mutez %outstanding_tez) (nat %total_payments_euro_est)))))))
                                              (pair (bytes %verify_merkle_root)
                                                    (pair (bytes %verify_merkle_root_info) (nat %verify_merkle_root_proof_depth)))))))))
                (pair %update_extra_db (bytes %key) (bytes %value))))) ;
  storage
    (pair (pair (pair (pair (pair (lambda %admin_check_lambda
                                     (pair (pair (address %address) (option %permission string))
                                           (pair (address %self_address) (address %self_admin)))
                                     bool)
                                  (address %administrator))
                            (pair (mutez %collected_baking_awards)
                                  (pair (big_map %confiscated_fa2 (pair address nat) nat) (mutez %confiscated_xtz))))
                      (pair (pair (big_map %extra_db bytes bytes)
                                  (pair (address %kyc_proxy) (nat %kyc_threshold_euro)))
                            (pair (address %materia_address)
                                  (pair (lambda %may_modify_lambda
                                           (pair (address %caller) (pair (address %self_admin) (list %wallets address)))
                                           bool)
                                        (big_map %metadata string bytes)))))
                (pair (pair (pair (big_map %names string (pair (nat %claim_strength) (address %holder)))
                                  (bytes %names_merkle_root))
                            (pair (bytes %names_merkle_root_info)
                                  (pair (nat %names_merkle_root_proof_depth)
                                        (big_map %outstanding_fa2 (pair address (pair address nat)) nat))))
                      (pair (pair (address %price_proxy)
                                  (pair (bool %require_basic_kyc)
                                        (big_map %users
                                           address
                                           (pair (pair (option %first_payment timestamp)
                                                       (pair (set %flags string) (timestamp %kyc_valid_until)))
                                                 (pair (pair (map %metadata string bytes) (option %name string))
                                                       (pair (mutez %outstanding_tez) (nat %total_payments_euro_est)))))))
                            (pair (bytes %verify_merkle_root)
                                  (pair (bytes %verify_merkle_root_info) (nat %verify_merkle_root_proof_depth))))))
          (big_map
             nat
             (lambda
                (pair (or (or (or (or (list address) (or (list address) (list address)))
                                  (or (or (list address) (list address))
                                      (or (list address) (list (pair address (list (pair address nat)))))))
                              (or (or (or (list address) (option key_hash)) (or (list address) (pair address timestamp)))
                                  (or (or address address) (or address (pair bytes (pair bytes nat))))))
                          (or (or (or (or (pair bytes (pair bytes nat)) (list address)) (or address address))
                                  (or (or (pair mutez address) (pair nat (pair (pair address nat) address)))
                                      (or (pair mutez address)
                                          (pair (pair address (pair address nat)) (pair address (list (pair address nat)))))))
                              (or (or (or (pair address (list (pair address mutez))) address)
                                      (or (pair nat (pair string (list bytes))) (list bytes)))
                                  (or (or bytes (pair address (map string bytes))) (or (pair address nat) unit)))))
                      (pair (pair (pair (pair (lambda (pair (pair address (option string)) (pair address address)) bool) address)
                                        (pair mutez (pair (big_map (pair address nat) nat) mutez)))
                                  (pair (pair (big_map bytes bytes) (pair address nat))
                                        (pair address
                                              (pair (lambda (pair address (pair address (list address))) bool) (big_map string bytes)))))
                            (pair (pair (pair (big_map string (pair nat address)) bytes)
                                        (pair bytes (pair nat (big_map (pair address (pair address nat)) nat))))
                                  (pair (pair address
                                              (pair bool
                                                    (big_map
                                                       address
                                                       (pair (pair (option timestamp) (pair (set string) timestamp))
                                                             (pair (pair (map string bytes) (option string)) (pair mutez nat))))))
                                        (pair bytes (pair bytes nat))))))
                (pair (list operation)
                      (pair (pair (pair (pair (lambda (pair (pair address (option string)) (pair address address)) bool) address)
                                        (pair mutez (pair (big_map (pair address nat) nat) mutez)))
                                  (pair (pair (big_map bytes bytes) (pair address nat))
                                        (pair address
                                              (pair (lambda (pair address (pair address (list address))) bool) (big_map string bytes)))))
                            (pair (pair (pair (big_map string (pair nat address)) bytes)
                                        (pair bytes (pair nat (big_map (pair address (pair address nat)) nat))))
                                  (pair (pair address
                                              (pair bool
                                                    (big_map
                                                       address
                                                       (pair (pair (option timestamp) (pair (set string) timestamp))
                                                             (pair (pair (map string bytes) (option string)) (pair mutez nat))))))
                                        (pair bytes (pair bytes nat))))))))) ;
  code { UNPAIR 3 ;
         IF_LEFT
           { DUP ;
             IF_LEFT
               { IF_LEFT
                   { IF_LEFT
                       { IF_LEFT
                           { DROP ; PUSH nat 0 }
                           { IF_LEFT { DROP ; PUSH nat 1 } { DROP ; PUSH nat 2 } } }
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 3 } { DROP ; PUSH nat 4 } }
                           { IF_LEFT { DROP ; PUSH nat 5 } { DROP ; PUSH nat 6 } } } }
                   { IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 7 } { DROP ; PUSH nat 8 } }
                           { IF_LEFT { DROP ; PUSH nat 9 } { DROP ; PUSH nat 10 } } }
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 11 } { DROP ; PUSH nat 12 } }
                           { IF_LEFT { DROP ; PUSH nat 13 } { DROP ; PUSH nat 14 } } } } }
               { IF_LEFT
                   { IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 15 } { DROP ; PUSH nat 16 } }
                           { IF_LEFT { DROP ; PUSH nat 17 } { DROP ; PUSH nat 18 } } }
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 19 } { DROP ; PUSH nat 20 } }
                           { IF_LEFT { DROP ; PUSH nat 21 } { DROP ; PUSH nat 22 } } } }
                   { IF_LEFT
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 23 } { DROP ; PUSH nat 24 } }
                           { IF_LEFT { DROP ; PUSH nat 25 } { DROP ; PUSH nat 26 } } }
                       { IF_LEFT
                           { IF_LEFT { DROP ; PUSH nat 27 } { DROP ; PUSH nat 28 } }
                           { IF_LEFT { DROP ; PUSH nat 29 } { DROP ; PUSH nat 30 } } } } } ;
             DUP 4 ;
             SWAP ;
             GET ;
             IF_NONE { UNIT ; FAILWITH } {} ;
             DUG 2 ;
             PAIR ;
             EXEC ;
             UNPAIR }
           { IF_LEFT
               { DROP ;
                 UNPAIR ;
                 UNPAIR ;
                 UNPAIR ;
                 SWAP ;
                 UNPAIR ;
                 AMOUNT ;
                 ADD ;
                 PAIR ;
                 SWAP ;
                 PAIR ;
                 PAIR ;
                 PAIR }
               { IF_LEFT
                   { SWAP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SELF_ADDRESS ;
                     PAIR ;
                     PUSH (option string) (Some "update_code") ;
                     SENDER ;
                     PAIR ;
                     PAIR ;
                     EXEC ;
                     IF {} { UNIT ; FAILWITH } ;
                     DUP ;
                     CAR ;
                     IF_LEFT
                       { IF_LEFT
                           { IF_LEFT
                               { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 8 ; UPDATE ; SWAP }
                               { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 22 ; UPDATE ; SWAP } }
                           { IF_LEFT
                               { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 23 ; UPDATE ; SWAP }
                               { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 24 ; UPDATE ; SWAP } } }
                       { IF_LEFT
                           { IF_LEFT
                               { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 25 ; UPDATE ; SWAP }
                               { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 26 ; UPDATE ; SWAP } }
                           { IF_LEFT
                               { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 27 ; UPDATE ; SWAP }
                               { IF_LEFT
                                   { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 29 ; UPDATE ; SWAP }
                                   { DROP ; DIG 2 ; SWAP ; CDR ; SOME ; PUSH nat 30 ; UPDATE ; SWAP } } } } }
                   { SWAP ;
                     DUP ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CAR ;
                     SWAP ;
                     DUP ;
                     DUG 3 ;
                     CAR ;
                     CAR ;
                     CAR ;
                     CDR ;
                     SELF_ADDRESS ;
                     PAIR ;
                     PUSH (option string) (Some "update_extra_db") ;
                     SENDER ;
                     PAIR ;
                     PAIR ;
                     EXEC ;
                     IF {} { UNIT ; FAILWITH } ;
                     SWAP ;
                     UNPAIR ;
                     UNPAIR ;
                     SWAP ;
                     UNPAIR ;
                     UNPAIR ;
                     DUP 6 ;
                     CDR ;
                     SOME ;
                     DIG 6 ;
                     CAR ;
                     UPDATE ;
                     PAIR ;
                     PAIR ;
                     SWAP ;
                     PAIR ;
                     PAIR } } ;
             NIL operation } ;
         NIL operation ;
         SWAP ;
         ITER { CONS } ;
         DUG 2 ;
         PAIR ;
         SWAP ;
         PAIR } ;
  view "has_valid_kyc"
       address
       bool
       { UNPAIR 3 ;
         DIG 2 ;
         DROP ;
         SWAP ;
         DUP ;
         DUG 2 ;
         GET 5 ;
         GET 4 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         MEM ;
         IF { SWAP ;
              DUP ;
              DUG 2 ;
              GET 5 ;
              GET 4 ;
              SWAP ;
              DUP ;
              DUG 2 ;
              GET ;
              IF_NONE { UNIT ; FAILWITH } {} ;
              CAR ;
              GET 3 ;
              PUSH string "kyc_check_ok" ;
              MEM ;
              IF { NOW ;
                   DIG 2 ;
                   GET 5 ;
                   GET 4 ;
                   DIG 2 ;
                   GET ;
                   IF_NONE { UNIT ; FAILWITH } {} ;
                   CAR ;
                   GET 4 ;
                   COMPARE ;
                   GT }
                 { DROP 2 ; PUSH bool False } }
            { DROP 2 ; PUSH bool False } } ;
  view "may_trade"
       address
       bool
       { UNPAIR 3 ;
         DIG 2 ;
         DROP ;
         PUSH bool True ;
         DUP 3 ;
         GET 5 ;
         GET 4 ;
         DUP 3 ;
         MEM ;
         IF { IF { SWAP ;
                   DUP ;
                   DUG 2 ;
                   GET 5 ;
                   GET 4 ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { UNIT ; FAILWITH } {} ;
                   CAR ;
                   GET 3 ;
                   PUSH string "hard_banned" ;
                   MEM ;
                   IF { PUSH bool False }
                      { SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET 5 ;
                        GET 4 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET ;
                        IF_NONE { UNIT ; FAILWITH } {} ;
                        CAR ;
                        GET 3 ;
                        PUSH string "soft_banned" ;
                        MEM ;
                        NOT } ;
                   IF { SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET 5 ;
                        GET 4 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET ;
                        IF_NONE { UNIT ; FAILWITH } {} ;
                        CAR ;
                        GET 3 ;
                        PUSH string "kyc_check_ok" ;
                        MEM ;
                        IF { NOW ;
                             DUP 3 ;
                             GET 5 ;
                             GET 4 ;
                             DUP 3 ;
                             GET ;
                             IF_NONE { UNIT ; FAILWITH } {} ;
                             CAR ;
                             GET 4 ;
                             COMPARE ;
                             GT }
                           { PUSH bool False } ;
                        IF { DROP 2 ; PUSH bool True }
                           { SWAP ;
                             DUP ;
                             DUG 2 ;
                             GET 5 ;
                             GET 4 ;
                             SWAP ;
                             DUP ;
                             DUG 2 ;
                             GET ;
                             IF_NONE { UNIT ; FAILWITH } {} ;
                             CAR ;
                             GET 3 ;
                             PUSH string "kyc_threshold_triggered" ;
                             MEM ;
                             IF { DROP 2 ; PUSH bool False }
                                { SWAP ;
                                  DUP ;
                                  DUG 2 ;
                                  GET 5 ;
                                  GET 3 ;
                                  IF { SWAP ;
                                       GET 5 ;
                                       GET 4 ;
                                       SWAP ;
                                       GET ;
                                       IF_NONE { UNIT ; FAILWITH } {} ;
                                       CAR ;
                                       GET 3 ;
                                       PUSH string "basic_kyc_check_ok" ;
                                       MEM ;
                                       NOT ;
                                       NOT }
                                     { DROP 2 ; PUSH bool True } } } }
                      { DROP 2 ; PUSH bool False } }
                 { DROP 2 ; PUSH bool False } }
            { DROP 2 ; GET 5 ; GET 3 ; NOT } } ;
  view "none_banned"
       (list address)
       bool
       { UNPAIR 3 ;
         DIG 2 ;
         DROP ;
         PUSH bool True ;
         SWAP ;
         DUP ;
         DUG 2 ;
         ITER { DUP 4 ;
                GET 5 ;
                GET 4 ;
                SWAP ;
                DUP ;
                DUG 2 ;
                MEM ;
                IF { SWAP ;
                     IF { DUP 3 ;
                          GET 5 ;
                          GET 4 ;
                          SWAP ;
                          GET ;
                          IF_NONE { UNIT ; FAILWITH } {} ;
                          CAR ;
                          GET 3 ;
                          PUSH string "hard_banned" ;
                          MEM ;
                          NOT }
                        { DROP ; PUSH bool False } }
                   { DROP } } ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP } ;
  view "none_banned_or_flagged"
       (list address)
       bool
       { UNPAIR 3 ;
         DIG 2 ;
         DROP ;
         PUSH bool True ;
         SWAP ;
         DUP ;
         DUG 2 ;
         ITER { DUP 4 ;
                GET 5 ;
                GET 4 ;
                SWAP ;
                DUP ;
                DUG 2 ;
                MEM ;
                IF { SWAP ;
                     IF { DUP 3 ;
                          GET 5 ;
                          GET 4 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          GET ;
                          IF_NONE { UNIT ; FAILWITH } {} ;
                          CAR ;
                          GET 3 ;
                          PUSH string "hard_banned" ;
                          MEM ;
                          IF { PUSH bool False }
                             { DUP 3 ;
                               GET 5 ;
                               GET 4 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               GET ;
                               IF_NONE { UNIT ; FAILWITH } {} ;
                               CAR ;
                               GET 3 ;
                               PUSH string "banned" ;
                               MEM ;
                               NOT } ;
                          IF { DUP 3 ;
                               GET 5 ;
                               GET 4 ;
                               SWAP ;
                               GET ;
                               IF_NONE { UNIT ; FAILWITH } {} ;
                               CAR ;
                               GET 3 ;
                               PUSH string "flagged" ;
                               MEM ;
                               NOT }
                             { DROP ; PUSH bool False } }
                        { DROP ; PUSH bool False } }
                   { DROP } } ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP } ;
  view "query_extra_db"
       bytes
       (option bytes)
       { UNPAIR 3 ;
         DIG 2 ;
         DROP ;
         NONE bytes ;
         DUP 3 ;
         CAR ;
         GET 3 ;
         CAR ;
         DUP 3 ;
         MEM ;
         IF { DROP ;
              SWAP ;
              CAR ;
              GET 3 ;
              CAR ;
              SWAP ;
              GET ;
              IF_NONE { UNIT ; FAILWITH } {} ;
              SOME }
            { SWAP ; DROP ; SWAP ; DROP } } ;
  view "verified"
       (list address)
       bool
       { UNPAIR 3 ;
         DIG 2 ;
         DROP ;
         PUSH bool True ;
         SWAP ;
         DUP ;
         DUG 2 ;
         ITER { DUP 4 ;
                GET 5 ;
                GET 4 ;
                SWAP ;
                DUP ;
                DUG 2 ;
                MEM ;
                IF { SWAP ;
                     IF { DUP 3 ;
                          GET 5 ;
                          GET 4 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          GET ;
                          IF_NONE { UNIT ; FAILWITH } {} ;
                          CAR ;
                          GET 3 ;
                          PUSH string "hard_banned" ;
                          MEM ;
                          IF { PUSH bool False }
                             { DUP 3 ;
                               GET 5 ;
                               GET 4 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               GET ;
                               IF_NONE { UNIT ; FAILWITH } {} ;
                               CAR ;
                               GET 3 ;
                               PUSH string "soft_banned" ;
                               MEM ;
                               NOT } ;
                          IF { DUP 3 ;
                               GET 5 ;
                               GET 4 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               GET ;
                               IF_NONE { UNIT ; FAILWITH } {} ;
                               CAR ;
                               GET 3 ;
                               PUSH string "flagged" ;
                               MEM ;
                               NOT }
                             { PUSH bool False } ;
                          IF { DUP 3 ;
                               GET 5 ;
                               GET 4 ;
                               SWAP ;
                               GET ;
                               IF_NONE { UNIT ; FAILWITH } {} ;
                               CAR ;
                               GET 3 ;
                               PUSH string "verified" ;
                               MEM }
                             { DROP ; PUSH bool False } }
                        { DROP ; PUSH bool False } }
                   { DROP 2 ; PUSH bool False } } ;
         SWAP ;
         DROP ;
         SWAP ;
         DROP } ;
  view "verified_and_has_valid_kyc"
       address
       bool
       { UNPAIR 3 ;
         DIG 2 ;
         DROP ;
         SWAP ;
         DUP ;
         DUG 2 ;
         GET 5 ;
         GET 4 ;
         SWAP ;
         DUP ;
         DUG 2 ;
         MEM ;
         IF { SWAP ;
              DUP ;
              DUG 2 ;
              GET 5 ;
              GET 4 ;
              SWAP ;
              DUP ;
              DUG 2 ;
              GET ;
              IF_NONE { UNIT ; FAILWITH } {} ;
              CAR ;
              GET 3 ;
              PUSH string "kyc_check_ok" ;
              MEM ;
              IF { NOW ;
                   DUP 3 ;
                   GET 5 ;
                   GET 4 ;
                   DUP 3 ;
                   GET ;
                   IF_NONE { UNIT ; FAILWITH } {} ;
                   CAR ;
                   GET 4 ;
                   COMPARE ;
                   GT }
                 { PUSH bool False } ;
              IF { SWAP ;
                   DUP ;
                   DUG 2 ;
                   GET 5 ;
                   GET 4 ;
                   SWAP ;
                   DUP ;
                   DUG 2 ;
                   GET ;
                   IF_NONE { UNIT ; FAILWITH } {} ;
                   CAR ;
                   GET 3 ;
                   PUSH string "hard_banned" ;
                   MEM ;
                   IF { PUSH bool False }
                      { SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET 5 ;
                        GET 4 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET ;
                        IF_NONE { UNIT ; FAILWITH } {} ;
                        CAR ;
                        GET 3 ;
                        PUSH string "soft_banned" ;
                        MEM ;
                        NOT } ;
                   IF { SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET 5 ;
                        GET 4 ;
                        SWAP ;
                        DUP ;
                        DUG 2 ;
                        GET ;
                        IF_NONE { UNIT ; FAILWITH } {} ;
                        CAR ;
                        GET 3 ;
                        PUSH string "flagged" ;
                        MEM ;
                        NOT }
                      { PUSH bool False } ;
                   IF { SWAP ;
                        GET 5 ;
                        GET 4 ;
                        SWAP ;
                        GET ;
                        IF_NONE { UNIT ; FAILWITH } {} ;
                        CAR ;
                        GET 3 ;
                        PUSH string "verified" ;
                        MEM }
                      { DROP 2 ; PUSH bool False } }
                 { DROP 2 ; PUSH bool False } }
            { DROP 2 ; PUSH bool False } } }
